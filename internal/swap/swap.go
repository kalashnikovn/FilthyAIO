package swap

import (
	"filthy/internal/account"
	"filthy/internal/constants"
	"filthy/internal/utils"
	"fmt"
	"github.com/TwiN/go-color"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/sirupsen/logrus"
	"math/big"
)

type SwapAccount struct {
	account.Wallet
	account.Helper
}

func NewSwapAccount(wallet account.Wallet) SwapAccount {
	return SwapAccount{
		wallet,
		account.Helper{},
	}
}

func (acc SwapAccount) Swap() {
	chain := constants.SETTINGS.Swap.Chain
	network := constants.SWAP_CHAINS[chain]

	tokenFrom := constants.SETTINGS.Swap.TokenFrom
	tokenTo := constants.SETTINGS.Swap.TokenTo

	scan := constants.SCANS[chain]

	constants.Logger.WithFields(logrus.Fields{
		color.InYellow("–°–µ—Ç—å"):       chain,
		color.InYellow("–¢–æ–∫–µ–Ω"):      tokenTo,
		color.InYellow("–ü–æ–∫—É–ø–∞—é –∑–∞"): tokenFrom,
	}).Warn("–ù–∞—á–∏–Ω–∞—é —Å–≤–∞–ø –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ", acc.PublicKey.String())
	utils.SendTelegramMessage("üü™ –ù–∞—á–∏–Ω–∞—é —Å–≤–∞–ø –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞\n\n",
		"–°–µ—Ç—å: ", chain,
		"\n–¢–æ–∫–µ–Ω: ", tokenTo,
		"\n–ü–æ–∫—É–ø–∞—é –∑–∞: ", tokenFrom)

	tokenAddr := constants.CONTRACTS[tokenFrom][chain]
	toTokenAddr := constants.CONTRACTS[tokenTo][chain]
	slippage := constants.SETTINGS.Accounts.Slippage

	percentOfUscd := constants.SETTINGS.Swap.PercentOfUsdc

	fromNetworks := []string{chain}

	moneyChain, err := acc.FindChainWithMoney(tokenFrom, fromNetworks, acc.PublicKey)
	if err != nil {
		constants.Logger.WithFields(logrus.Fields{
			color.InRed("–û—à–∏–±–∫–∞"): err,
		}).Error(fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ %s –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ", tokenFrom))
		utils.SendTelegramMessage(fmt.Sprintf("üü• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ %s –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ \n\n", tokenFrom),
			"–û—à–∏–±–∫–∞: ", err.Error())
		return
	}

	constants.Logger.WithFields(logrus.Fields{
		color.InPurple(fmt.Sprintf("–ë–∞–ª–∞–Ω—Å %s", tokenFrom)): moneyChain.Balance.UiAmount,
		color.InPurple("–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –±–∞–ª–∞–Ω—Å–∞"):                percentOfUscd,
	}).Trace(fmt.Sprintf("–ù–∞–π–¥–µ–Ω –±–∞–ª–∞–Ω—Å %s. –ü—Ä–æ–¥–æ–ª–∂–∞—é", tokenFrom))

	//spew.Dump(moneyChain)

	amount := moneyChain.UiAmount * (percentOfUscd / 100)

	if amount == 0 {
		constants.Logger.Error(fmt.Sprintf("–ö–æ–ª-–≤–æ %s –¥–ª—è —Å–≤–∞–ø–∞ —Ä–∞–≤–Ω–æ 0, —Å–∫–∏–ø–∞—é", tokenFrom))
		utils.SendTelegramMessage(fmt.Sprintf("–ö–æ–ª-–≤–æ %s –¥–ª—è —Å–≤–∞–ø–∞ —Ä–∞–≤–Ω–æ 0, —Å–∫–∏–ø–∞—é", tokenFrom))
		return
	}
	//amount := 0.01

	ethBasedClient := NewBasedClient(constants.CLIENTS[chain], acc.Wallet)
	inch, err := BuyTokenByInch(ethBasedClient, tokenAddr, toTokenAddr, amount, int64(slippage), network)
	if err != nil {
		constants.Logger.WithFields(logrus.Fields{
			color.InRed("–û—à–∏–±–∫–∞"): err,
			//"Debug":  swapArgs,
		}).Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –Ω–∞ —Å–≤–∞–ø")
		utils.SendTelegramMessage("üü• –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –Ω–∞ —Å–≤–∞–ø\n\n",
			"–û—à–∏–±–∫–∞: ", err.Error())

		errWrite := utils.AppendToFile("errorSwapWallets.txt", utils.PrivateKeyToString(acc.PrivateKey))
		if errWrite != nil {
			constants.Logger.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ø—Ä–∏–≤–∞—Ç–Ω–∏–∫–∞ –≤ —Ñ–∞–π–ª errorSwapWallets.txt")
			return
		}

		return
	}

	if inch.Status == 0 {
		constants.Logger.WithFields(logrus.Fields{
			color.InRed("–•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"): inch.TxHash,
			color.InRed("–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫–∞–Ω"): scan + inch.TxHash.String(),
		}).Error("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞ —Å–≤–∞–ø –Ω–µ –ø—Ä–æ—à–ª–∞")
		utils.SendTelegramMessage("üü• –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞ —Å–≤–∞–ø –Ω–µ –ø—Ä–æ—à–ª–∞\n\n",
			"–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫–∞–Ω: ", scan+inch.TxHash.String())

		errWrite := utils.AppendToFile("errorSwapWallets.txt", utils.PrivateKeyToString(acc.PrivateKey))
		if errWrite != nil {
			constants.Logger.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ø—Ä–∏–≤–∞—Ç–Ω–∏–∫–∞ –≤ —Ñ–∞–π–ª errorSwapWallets.txt")
			return
		}
		return
	}

	constants.Logger.WithFields(logrus.Fields{
		color.InGreen("–•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"): inch.TxHash,
		color.InGreen("–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫–∞–Ω"): scan + inch.TxHash.String(),
	}).Info("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞ —Å–≤–∞–ø —É—Å–ø–µ—à–Ω–æ —Å–º–∞–π–Ω–∏–ª–∞—Å—å")

	utils.SendTelegramMessage("üü© –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞ —Å–≤–∞–ø —É—Å–ø–µ—à–Ω–æ —Å–º–∞–π–Ω–∏–ª–∞—Å—å\n\n",
		"–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫–∞–Ω: ", scan+inch.TxHash.String())

}

func BuyTokenByInch(ethBasedClient EthBasedClient, tokenAddr string, toTokenAddr string, amount float64, slippage int64, network string) (*types.Receipt, error) {
	usedTokenContractAddr := common.HexToAddress(tokenAddr)
	usedTokenIns := GetTokenInstance(usedTokenContractAddr, ethBasedClient.Client)
	//Logger.Info("Try to Get TokenDecimals")
	usedTokenDecimals := GetTokenDecimals(usedTokenIns)
	amountInWei := EtherToWeiByDecimal(big.NewFloat(amount), int(usedTokenDecimals))
	amountInWeiStr := amountInWei.String()
	//Logger.WithFields(logrus.Fields{"amountInWei": amountInWei, "amountInWeiStr": amountInWeiStr, "usedTokenDecimals": usedTokenDecimals}).Info("amountInWei")

	allowance, err := GetApproveAllowance(tokenAddr, ethBasedClient.Address.String(), network)
	if err != nil {
		return nil, err
	}
	if allowance == "0" {
		approveErr := ApproveTokenByInch(ethBasedClient, tokenAddr, network)
		if approveErr != nil {
			return nil, approveErr
		}
	}

	tx, err := SwapTokenByInch(ethBasedClient, tokenAddr, toTokenAddr, amountInWeiStr, ethBasedClient.Address.String(), slippage, network)
	if err != nil {
		return nil, err
	}
	return tx, nil
}
